'''keys: Solutions:Similar: T:S:'''from typing import Listimport itertoolsclass Solution:    # O(1) space, two pointer    def backspaceCompare2(self, S, T):        def F(S):            skip = 0            for x in reversed(S):                if x == '#':                    skip += 1                elif skip:                    skip -= 1                else:                    yield x                        return all(x == y for x, y in itertools.zip_longest(F(S), F(T)))            # self-made    def backspaceCompare(self, S: str, T: str) -> bool:        def helper(string):            res = ""            if not string: return res            for c in string:                if c == "#":                    res = res[:-1] if res else res                else:                    res += c            return res                            s = helper(S)        t = helper(T)        return s == t                # little bit fancier, T and S: O(M+N), M = len(S) and N = len(T)    def backspaceCompare1(self, S, T):        def build(S):            ans = []            for c in S:                if c != '#':                    ans.append(c)                elif ans:                    ans.pop()            return "".join(ans)        return build(S) == build(T)