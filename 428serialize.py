'''keys: Solutions:Similar: 297, 449T:S:'''from typing import Listfrom collections import deque"""# Definition for a Node."""class Node(object):    def __init__(self, val=None, children=None):        self.val = val        self.children = childrenclass Codec:    # preorder, use one number to track how many children a node has    def serialize(self, root: 'Node') -> str:        """Encodes a tree to a single string.                :type root: Node        :rtype: str        """        def transform(node):            if not node:                 return                        val = node.val            vals.append(str(val))            vals.append(str(len(node.children)))            for child in node.children:                transform(child)                    vals = []        transform(root)        return " ".join(vals)        	    def deserialize(self, data: str) -> 'Node':        """Decodes your encoded data to tree.                :type data: str        :rtype: Node        """        def helper():            if not queue:                return            val = queue.popleft()            if not queue:                return            size = queue.popleft()            root = Node(val, [])            for i in range(size):                root.children.append(helper())            return root                queue = deque([int(x) for x in data.split(' ') if x])        return helper()        