'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # one array    def findJudge1(self, N: int, trust: List[List[int]]) -> int:        if len(trust) < N - 1: # if E < N - 1            return -1                scores = [0] * (N + 1)                for a, b in trust:            scores[a] += 1            scores[b] -= 1        # starting from the 1st element, 2nd argument as starting index        for i, score in enumerate(scores[1:], 1):            if score == N - 1:                return i        return -1            # two arrays    # T: O(E+N) -> O(E), E as length of trust list, since E >= N-1    # S: O(N)    def findJudge(self, N: int, trust: List[List[int]]) -> int:        if len(trust) < N - 1: # if E < N - 1            return -1                indegree = [0] * (N + 1)        outdegree = [0] * (N + 1)                for a, b in trust:            outdegree[a] += 1            indegree[b] += 1                for i in range(1, N+1):            if indegree[i] == N-1 and outdegree[i] == 0:                return i        return -1        