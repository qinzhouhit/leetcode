'''keys: Solutions:Similar:T:S:'''from typing import Listfrom bisect import *# balanced tree# T: O(N^2) worst case, O(NlogN) on random data# S: O(N)'''Each node represents some interval [self.start, self.end) while self.left, self.right represents nodes that are smaller or larger than the current node.Left boundary inclusive, right boundary not inclusive.'''class Node:    # __slots__ = 'start', 'end', 'left', 'right'        def __init__(self, start, end):        self.start = start        self.end = end        self.left = self.right = None    def insert(self, node):        # self is like the root, node is like the child        if node.start >= self.end: # larger interval, append it as right child            if not self.right:                self.right = node                return True            return self.right.insert(node) # recursively insert        elif node.end <= self.start: # append it as left tree            if not self.left:                self.left = node                return True            return self.left.insert(node)        else: # node.start < self.end or node.end > self.start            return Falseclass MyCalendar1(object):    def __init__(self):        self.root = None    def book(self, start, end):        if self.root is None:            self.root = Node(start, end)            return True        return self.root.insert(Node(start, end))# use lib bisect, advancedclass MyCalendar2:    def __init__(self):        self.calendar = []            def book(self, start: 'int', end: 'int') -> 'bool':        idx = bisect_left(self.calendar, (start, end))        is_left_valid = idx == 0 or self.calendar[idx-1][1] <= start        is_right_valid = idx == len(self.calendar) or end <= self.calendar[idx][0]                if is_left_valid and is_right_valid:            self.calendar.insert(idx, (start, end))            return True        return False# T: O(N^2); S: O(N)class MyCalendar:    def __init__(self):        self.calendar = []    def book(self, start: int, end: int) -> bool:        for s, e in self.calendar:            # i.e., if s < end and start < e:            if not (start >= e or end <= s):                return False        self.calendar.append((start, end))        return True# Your MyCalendar object will be instantiated and called as such:# obj = MyCalendar()# param_1 = obj.book(start,end)