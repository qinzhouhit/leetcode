'''keys: Solutions:Similar: T:S:'''from typing import Listfrom collections import dequeclass Solution:    # bfs    def maxDistance(self, grid: List[List[int]]) -> int:        R, C = len(grid), len(grid[0])        q = deque([(i,j) for i in range(R) \                   for j in range(C) if grid[i][j] == 1])            if len(q) == R * C or len(q) == 0: return -1        ans = 0        while q:            size = len(q)            for _ in range(size): # for each "layer/round"                i, j = q.popleft()                for x,y in [(1,0), (-1, 0), (0, 1), (0, -1)]:                    xi, yj = x+i, y+j                    if 0 <= xi < R and 0 <= yj < C and grid[xi][yj] == 0:                        q.append((xi, yj))                        grid[xi][yj] = 1            ans += 1        return ans-1