'''keys: Solutions:Similar:T:S:'''from typing import Listclass UnionFind:    def __init__(self, n):        self.f = {i : i for i in range(n)} # <k, v> = <node, father of node>        self.count = n # number of connected components            def union(self, a, b):        ra, rb = self.find(a), self.find(b)        if ra == rb:            return         self.f[rb] = ra        self.count -= 1             def find(self, x):        if x == self.f[x]:            return x        fx = x         while fx != self.f[fx]:            fx = self.f[fx] # goes to the child        while x != fx:            nx = self.f[x]            self.f[x] = fx             x = nx        return x # x == fx         class Solution:    """    @param sets: Initial set list    @return: The final number of sets    """    def setUnion(self, sets):        # Write your code here        if not sets:            return 0        uf = UnionFind(len(sets))        ele_to_set_idx = {} # k: value in a set, v: set idx                for set_idx, aset in enumerate(sets):            for ele in aset:                if ele in ele_to_set_idx:                    uf.union( set_idx, ele_to_set_idx[ele])                else:                    ele_to_set_idx[ele] = set_idx        return uf.count                