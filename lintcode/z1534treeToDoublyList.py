'''keys: Solutions:Similar:T:S:'''from typing import List        #### return head, tail        #          4    #        /  \    #       2    5    #      / \    #     1   3    # Output: "left:1->5->4->3->2  right:1->2->3->4->5"        class Solution:    """    @param root: root of a tree    @return: head node of a doubly linked list    """    def treeToDoublyList(self, root):        if not root:            return         head, tail = self.helper(root)        tail.right = head # successor        head.left = tail # predecessor        return head        def helper(self, root):        if not root:            return None, None                 left_head, left_tail = self.helper(root.left)        right_head, right_tail = self.helper(root.right)                # (left_head,left_tail) root (right_head, right_tail)                if not root.left:            head = root # the smallest node (leftmost)        else:            # (left_head,left_tail) <-> root            head = left_head             left_tail.right = root             root.left = left_tail         if not root.right:            tail = root         else:            # root <-> (right_head, right_tail)            tail = right_tail             root.right = right_head             right_head.left = root                    return head, tail                    