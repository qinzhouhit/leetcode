'''keys: Solutions:Similar:T:S:'''from typing import Listimport collections"""Definition of Interval."""class Interval(object):    def __init__(self, start, end):        self.start = start        self.end = endclass Solution:    """    @param intervals: The intervals    @return: The answer    """    # just imagine a line sweeping from left to right across these    # layer-by-layer stacked intervals    def digitalCoverage(self, intervals):        # interesting fact: we don't need to consider those values during the         # intervals, since we'll always find samller ones        events = []        for inv in intervals:            # (interval start/end value, cmp,  mark)            # cmp: when sorting, making starts ahead of ends            # mark: start event count += 1, end event count -= 1,             events.append( (inv.start, 0, 1) )            events.append( (inv.end,  1, -1) )                    events = sorted( events )         cnt, res, max_cnt  = 0, 0, 0          for val, _, mark in events:            cnt += mark            if max_cnt < cnt:                max_cnt = cnt                 res = val        return res            def digitalCoverage1(self, intervals):        # Write your code here        mxc = res = 0        count = collections.defaultdict(int)        for interval in intervals:            count[interval.start] += 1            count[interval.end + 1] -= 1        pre = 0        for key in sorted(count):            pre += count[key]            if pre > mxc:                mxc = pre                res = key        return res                    