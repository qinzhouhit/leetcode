'''keys: Solutions:Similar:T:S:'''from typing import Listclass Solution:    # loop over the bits    # T: O(log_2V * n); V: O(log_2V) -> O(1)     def totalHammingDistance1(self, nums: List[int]) -> int:        if not nums:            return 0                res = 0; n = len(nums)        ct = [0] * 32 # storing the total number of "1" from all nums        for num in nums:            i = 0 # idx for ct            while num > 0:                ct[i] += num & 1                num >>= 1                i += 1                        for k in ct:            # choose 1 number from k numbers with "1" on this idx, then choose             # 1 number from (n-k) numbers with "0" on this idx            res += k * (n-k)                     return res                # O(log_2V * n^2), TLE, log_2V as length of bits    def totalHammingDistance(self, nums: List[int]) -> int:        if not nums:            return 0                def cmp(num1, num2):            ct = 0            while num1 and num2:                if num1 & 1 != num2 & 1:                    ct += 1                num1 >>= 1                num2 >>= 1                            while num1:                ct += 1                num1 >>= 1            while num2:                ct += 1                num2 >>= 1            return ct                res = 0        for i in range(len(nums)-1):            for j in range(i+1, len(nums)):                res += cmp(nums[i], nums[j])        return res                            