'''keys: Solutions:Similar: T:S:'''from typing import List# Definition for a binary tree node.class TreeNode:    def __init__(self, val=0, left=None, right=None):        self.val = val        self.left = left        self.right = right                class Solution:    # recursive, even shorter    def isUnivalTree3(self, root: TreeNode) -> bool:        def dfs(node):            return not node or node.val == root.val and dfs(node.left) and dfs(node.right)        return dfs(root)        # recursively; O(H) for S    def isUnivalTree2(self, root: TreeNode) -> bool:        left_correct = (not root.left or root.val == root.left.val                and self.isUnivalTree2(root.left))        right_correct = (not root.right or root.val == root.right.val                and self.isUnivalTree2(root.right))        return left_correct and right_correct            # O(N) for S and T    def isUnivalTree1(self, root: TreeNode) -> bool:        vals = []        def dfs(node):            if node:                vals.append(node.vals)                dfs(node.left)                dfs(node.right)        dfs(root)        return len(set(vals)) == 1                    def isUnivalTree(self, root: TreeNode) -> bool:        if not root:            return True                stack = [root]        val = root.val        while stack:            node = stack.pop()            if node:                if val == node.val:                    stack.append(node.left)                    stack.append(node.right)                else:                     return False        return True            