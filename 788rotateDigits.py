'''keys: Solutions:Similar:T:S:'''from typing import Listclass Solution:        def rotatedDigits3(self, N):        s1 = set([0, 1, 8])        s2 = set([0, 1, 8, 2, 5, 6, 9])        s = set()        res = 0        N = map(int, str(N))        for i, v in enumerate(N):            for j in range(v):                if s.issubset(s2) and j in s2:                    res += 7**(len(N) - i - 1)                if s.issubset(s1) and j in s1:                    res -= 3**(len(N) - i - 1)            if v not in s2:                return res            s.add(v)        return res + (s.issubset(s2) and not s.issubset(s1))        # DP; O(logN) for S and T    def rotatedDigits2(self, N):        A = map(int, str(N))        memo = {}        def dp(i, equality_flag, involution_flag):            if i == len(A): return +(involution_flag)            if (i, equality_flag, involution_flag) not in memo:                ans = 0                for d in range(A[i] + 1 if equality_flag else 10):                    if d in {3, 4, 7}: continue                    ans += dp(i+1, equality_flag and d == A[i],                              involution_flag or d in {2, 5, 6, 9})                memo[i, equality_flag, involution_flag] = ans            return memo[i, equality_flag, involution_flag]        return dp(0, True, False)        # concise; T: O(NlogN); S: O(logN)    # A number has logN digits    def rotatedDigits1(self, N):        ans = 0        # For each x in [1, N], check whether it's good        for x in range(1, N+1):            S = str(x)            # Each x has only rotateable digits (347), and one of them            # rotates to a different digit (2569)            ans += (all(d not in '347' for d in S)                    and any(d in '2569' for d in S))        return ans        # self-made    def rotatedDigits(self, N: int) -> int:                h = {"0":"0", "1":"1", "8":"8", "2":"5", "5":"2", "6":"9", "9":"6"}                def valid(num):            rotated = ""            for c in str(num):                if c in h:                    rotated += h[c]                else:                    return False            if rotated != str(num):                return True            return False                res = 0        for i in range(1, N+1):            if valid(i):                # print (i)                res += 1        return res