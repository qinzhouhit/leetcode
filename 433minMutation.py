'''keys: Solutions:Similar: 127T: O(N * N * M * K) where:N is length of start stringM is number of letters in geneK is number of strings in bankWe are generating mutations by changing each letter in start string. Then, We will have O(N * M) mutations.Generating a mutation takes O(N) because of toCharArray() and new String()We will add at most O(K) mutations into queue and there is no duplicate because of setS:'''from typing import Listimport collectionsclass Solution:    def minMutation(self, start: str, end: str, bank: List[str]) -> int:          bankSet = set(bank)        charSet = ['A', 'C', 'G', 'T']                queue = collections.deque([[start, 0]])                while queue:            curr, level = queue.popleft()            if curr == end:                return  level                        for i in range(len(curr)):                for c in charSet:                    next_ = curr[:i] + c + curr[i+1:]                    if next_ in bankSet:                        bankSet.remove(next_)                        queue.append((next_, level+1))                    return -1                            sol = Solution()print (sol.minMutation("AACCGGTT", "AACCGCTA", \                       ["AACCGGTA","AACCGCTA","AAACGGTA"]))                