'''keys: Solutions:Similar: T:S:'''from typing import Listimport heapqclass Solution:    # naive    def maxEvents2(self, events: List[List[int]]) -> int:        events.sort(key=lambda x: (x[1], x[0]))        res = 0        seen = [0]*100001        for e in events:            for i in range(e[0], e[1]+1):                if seen[i]: # day i already used                    continue                seen[i] = 1                res += 1                break        return res                        # not intuitive    def maxEvents1(self, events: List[List[int]]) -> int:        events.sort(key=lambda x: x[1])        days = set()        for start, end in events:            if start not in days:                days.add(start)            else:                i = start + 1 #                 while i in days and i <= end:                    i += 1                if i <= end:                    days.add(i)        return len(days)        # greedy, heapq    # T: O(d + nlogn); where D is the range of events[i][1]    # S: O(n)    def maxEvents(self, events: List[List[int]]) -> int:        events.sort(reverse=True)        heap = []        res = d = 0        while events or heap:            if not heap:                 d = events[-1][0]            while events and events[-1][0] <= d:                heapq.heappush(heap, events.pop()[1])            heapq.heappop(heap)            res += 1            d += 1            while heap and heap[0] < d:                heapq.heappop(heap)        return res