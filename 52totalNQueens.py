'''keys: Solutions:Similar:T:S:'''from typing import Listclass Solution:    def totalNQueens(self, n: int) -> int:        def could_place(r, c):            # all of the three can not be 1            return not (cols[c] + anti_diagonal[r-c] + diagonal[r+c])                def place_queen(r, c):            cols[c] = 1 # exclude the c, don't need to check for the row            # since we are at this row            anti_diagonal[r - c] = 1            diagonal[r + c] = 1                    def remove_queen(r, c):            cols[c] = 0 # exclude the r and c            anti_diagonal[r - c] = 0            diagonal[r + c] = 0                def backtrack(r = 0, ct = 0):            for c in range(n):                if could_place(r, c):                    place_queen(r, c)                    if r + 1 == n: # reaching last row                        ct += 1                    else:                        backtrack(r + 1, ct)                    remove_queen(r, c)            return ct                        cols = [0] * n        diagonal = [0] * (2*n-1)        anti_diagonal = [0] * (2*n-1)        return backtrack(0, 0)