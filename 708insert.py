'''keys: Solutions:Similar:T:S:'''from typing import List"""# Definition for a Node."""class Node:    def __init__(self, val=None, next=None):        self.val = val        self.next = nextclass Solution:    def insert(self, head: 'Node', insertVal: int) -> 'Node':        if head == None:            newNode = Node(insertVal, None)            newNode.next = newNode # to make it a circular list            return newNode         prev, curr = head, head.next        toInsert = False        while True:            if prev.val <= insertVal <= curr.val:                # Case #1.                toInsert = True            elif prev.val > curr.val:                # Case #2. where we locate the tail element                # 'prev' points to the tail, i.e. the largest element!                if insertVal >= prev.val or insertVal <= curr.val:                    toInsert = True            if toInsert:                prev.next = Node(insertVal, curr)                # mission accomplished                return head            prev, curr = curr, curr.next # if not insert, goes to next position            # go through the whole list and still no insert            if prev == head:                 break        # Case #3. In this case, we would end up looping through the list and         # getting back to the starting point. i.e., all duplicate values        prev.next = Node(insertVal, curr)        return head