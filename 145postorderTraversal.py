'''keys: Solutions:Similar: T: O(N) for T, N as the number of nodesS: O(H) for S, stack'''from typing import List# Definition for a binary tree node.class TreeNode:    def __init__(self, x):        self.val = x        self.left = None        self.right = Noneclass Solution:    def postorderTraversal(self, root: TreeNode) -> List[int]:        stack, res = [root], []        while stack:            node = stack.pop()            if node:                res.append(node.val)                stack.append(node.left)                stack.append(node.right)        return res[::-1]            def postorderTraversal1(self, root: TreeNode) -> List[int]:        if not root:            return []        return self.postorderTraversal(root.left) + \            self.postorderTraversal(root.right) + [root.val]