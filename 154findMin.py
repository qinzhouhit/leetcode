'''keys: bianry searchSolutions:Similar: 153T:S:'''from typing import Listclass Solution:    def findMin(self, nums: List[int]) -> int:        '''        To further reduce the search scope, a safe measure would be to         reduce the upper bound by one (i.e. high = high - 1), rather than         moving aggressively to the pivot point.        '''        low = 0        high = len(nums)-1        while low < high:            pivot = low + (high - low) // 2            # risk of overflow: pivot = (low + high) // 2            # Case 1):            if nums[pivot] < nums[high]:                high = pivot                 # alternative: high = pivot - 1                # too aggressive to move the `high` index,                # it won't work for the test case of [3, 1, 3]            # Case 2):            elif nums[pivot] > nums[high]:                low = pivot + 1            # Case 3):            else:                high -= 1        # the 'low' and 'high' index converge to the inflection point.        return nums[low]                        