'''keys: Solutions:Similar: T:S:'''from typing import List# Definition for a binary tree node.class TreeNode:    def __init__(self, val=0, left=None, right=None):        self.val = val        self.left = left        self.right = right        class Solution:    # in-order recursive: T: O(N) to build a traversal    # S: O(N) to keep an inorder traversal    def kthSmallest(self, root: TreeNode, k: int) -> int:        count = []        self.helper(root, count)        return count[k-1]        def helper(self, node, count):        if not node:            return                 self.helper(node.left, count)        count.append(node.val)        self.helper(node.right, count)                    # a beautiful iterative    # T: O(H + k), H as the tree height; defind by the stack, contains    # H + k elements    # S: O(H + k)    def kthSmallest2(self, root: TreeNode, k: int) -> int:        stack = []                while True:            while root:                stack.append(root)                root = root.left            root = stack.pop()            k -= 1            if not k:                return root.val            root = root.right                    # iteratve    def kthSmallest1(self, root: TreeNode, k: int) -> int:        def helper(node, res):            if len(res) > 1:                return                         if node.left:                helper(node.left, res)                        res[0] -= 1            if res[0] == 0:                res.append(node.val)                return                        if node.right:                helper(node.right, res)                res = [k]        helper(root, res)        return res[1]                                        