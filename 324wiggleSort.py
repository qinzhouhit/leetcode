'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # O(n) and in-place    # https://leetcode.com/problems/wiggle-sort-ii/discuss/77682/Step-by-step-explanation-of-index-mapping-in-Java    def wiggleSort1(self, nums: List[int]) -> None:        n = len(nums)        # average O(n)        median = self.findKthLargest(nums, (n+1)//2)        left = 0; i = 0; right = n - 1        while i <= right:            idx = self.indexMap(i, n)            if nums[idx] > median:                ind1 = self.indexMap(left, n)                left += 1                ind2 = self.indexMap(i, n)                i += 1                nums[ind1], nums[ind2] = nums[ind2], nums[ind1]            elif nums[idx] < median:                ind1 = self.indexMap(right, n)                right -= 1                ind2 = self.indexMap(i, n)                nums[ind1], nums[ind2] = nums[ind2], nums[ind1]            else:                i += 1            def indexMap(self, index, n):        return (1 + 2*index) % (n | 1)            # O(n) time, quick selection    def findKthLargest(self, nums, k):		# convert the kth largest to smallest        return self.findKthSmallest(nums, len(nums)+1-k)    def findKthSmallest(self, nums, k):        if nums:            pos = self.partition(nums, 0, len(nums)-1)            if k > pos+1:                return self.findKthSmallest(nums[pos+1:], k-pos-1)            elif k < pos+1:                return self.findKthSmallest(nums[:pos], k)            else:                return nums[pos]                def partition(self, nums, l, r):        low = l        while l < r:            if nums[l] < nums[r]:                nums[l], nums[low] = nums[low], nums[l]                low += 1            l += 1        nums[low], nums[r] = nums[r], nums[low]        return low            # O(nlogn) and not in-place    def wiggleSort(self, nums: List[int]) -> None:        """        Do not return anything, modify nums in-place instead.        """        nums.sort()         half = len(nums[::2])        nums[::2], nums[1::2] = nums[:half][::-1], nums[half:][::-1]