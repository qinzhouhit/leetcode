'''keys: Solutions:Similar: T:S:'''from typing import Listimport heapqclass Solution:    def smallestDistancePair2(self, nums: List[int], k: int) -> int:        nums.sort()                # TLE; T: O((K+N)logN), N as the length of nums    def smallestDistancePair1(self, nums: List[int], k: int) -> int:        nums.sort()        heap = [(nums[i+1] - nums[i], i, i+1)                for i in range(len(nums) - 1)]        heapq.heapify(heap)        for _ in range(k):            d, root, nei = heapq.heappop(heap)            if nei + 1 < len(nums):                # use the pair (i, x), add (i, x+1)                heapq.heappush(heap, (nums[nei + 1] - nums[root], \                                      root, nei + 1))        return d        # TLE    def smallestDistancePair(self, nums: List[int], k: int) -> int:        diffs = []        for i in range(len(nums)):            for j in range(i+1, len(nums)):                diffs.append(abs(nums[i]-nums[j]))        diffs.sort()        return diffs[k-1]    sol = Solution()print (sol.smallestDistancePair1([1,2,5,8,3,2,5,53], 3))