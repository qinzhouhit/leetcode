'''keys: the key idea is to shrink the candidates of wordlist for next round of guessingSolutions:Similar:T:S:'''from typing import Listimport collectionsimport itertoolsimport random# https://leetcode.com/problems/guess-the-word/discuss/133862/Random-Guess-and-Minimax-Guess-with-Comparison# https://leetcode.com/problems/guess-the-word/discuss/425068/Python-Beats-99class Solution:    def match(self, w1, w2):        return sum(i == j for i, j in zip(w1, w2))        # minmax; T: O(N^2); s: O(N)    def findSecretWord2(self, wordlist, master):        x = 0        while x < 6:            ct = collections.Counter(w1 for w1, w2 in \               itertools.permutations(wordlist, 2) if self.match(w1, w2) == 0)            guess = min(wordlist, key=lambda w: count[w])            x = master.guess(guess)            wordlist = [w for w in wordlist if self.match(w, guess) == x]            # shuffle and choose random words    def findSecretWord1(self, wordlist, master):        random.shuffle(wordlist)        for i in range(10):            guess = random.choice(wordlist)            x = master.guess(guess)            wordlist = [w for w in wordlist if sum(i == j for i, j in zip(guess, w)) == x]        # shuffle the wordlist and guess the 1st one    def findSecretWord(self, wordlist, master):        random.shuffle(wordlist)        for i in range(10):            guess = random.choice(0)            x = master.guess(guess)            wordlist = [w for w in wordlist if sum(i == j for i, j in zip(guess, w)) == x]                