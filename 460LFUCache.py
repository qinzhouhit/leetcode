'''keys: OrderedDict is a dict + double linked list.A count2node is a dict of OrderedDict, so you can look up like this count2node[count][key] to remove/update the node in O(1), or count2node[count].popitem(last=True) to remove the oldest node in O(1).Solutions:Similar: T:S:'''from typing import Listfrom collections import defaultdictfrom collections import OrderedDictclass Node:    def __init__(self, key, val, count):        self.key = key        self.val = val        self.count = count        class LFUCache:    def __init__(self, capacity: int):        self.cap = capacity        self.key2node = {}        self.count2node = defaultdict(OrderedDict)        self.minCount = None            def get(self, key: int) -> int:        if key not in self.key2node:            return -1        node = self.key2node[key]        del self.count2node[node.count][key]                    def put(self, key: int, value: int) -> None:        # Your LFUCache object will be instantiated and called as such:# obj = LFUCache(capacity)# param_1 = obj.get(key)# obj.put(key,value)                                                        