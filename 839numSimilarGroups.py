'''keys: union findSolutions:Similar: T:S:'''from typing import Listclass DSU:    def __init__(self, N):        self.p = list(range(N))    def find(self, x):        if self.p[x] != x:            self.p[x] = self.find(self.p[x])        return self.p[x]    def union(self, x, y):        self.p[self.find(x)] = self.find(y)    def group_num(self):        return sum([1 for i in range(len(self.p)) if i == self.p[i]])class Solution:    def numSimilarGroups(self, A: List[str]) -> int:        N, W = len(A), len(A[0])                def similar(w1, w2):            diff = 0            for x, y in zip(w1, w2):                if x != y:                    diff += 1            return diff <= 2        ufind = DSU(N)        for i in range(N):            for j in range(i+1, N):                if similar(A[i], A[j]):                    ufind.union(i, j)        return ufind.group_num()                        