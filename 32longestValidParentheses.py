'''keys: dpSolutions:Similar:T: S: '''from typing import Listclass Solution:    # using stack    # T: O(n); S: O(n)    def longestValidParentheses2(self, s: str) -> int:        max_res = 0        stack = []        stack.append(-1)        for i in range(len(s)):            if s[i] == "(":                stack.append(i)            else:                stack.pop()                if not stack:                    stack.append(i)                else:                    max_res = max(max_res, i - stack[-1])        return max_res            # two pointers    # T: O(n); S: O(1)    def longestValidParentheses2(self, s: str) -> int:        left, right = 0, 0        maxLen = 0        for i in range(len(s)): # left to right            if s[i] == "(":                left += 1            else:                right += 1            if left == right:                maxLen = max(maxLen, 2*right)            elif right >= left:                left, right = 0, 0                leftm, right = 0, 0 # right to left        for i in range(len(s)-1, -1, -1):            if s[i] == "(":                left += 1            else:                right += 1            if left == right:                maxLen = max(maxLen, 2*left)            elif left >= right:                left, right = 0, 0        return maxLen                                                                # dp version    # T: O(n); S: O(n)    def longestValidParentheses1(self, s: str) -> int:        max_res = 0        dp = [0]*len(s)        for i in range(1, len(s)):            if s[i] == ")":                if s[i-1] == "(":                    tmp = dp[i-2] if i >= 2 else 0                    dp[i] = tmp + 2                elif i - dp[i-1] > 0 and s[i - dp[i-1] - 1] == "(":                    tmp = dp[i - dp[i-1] - 2] if i - dp[i-1] >= 2 else 0                    dp[i] = dp[i-1] + tmp + 2                max_res = max(max_res, dp[i])        return max_res            # brutal force, TLE    # T: O(n^3); S: O(n)    def longestValidParentheses(self, s: str) -> int:        maxLen = 0        for i in range(len(s)):            for j in range(i+2, len(s)+1, 2):                if self.isValid(s[i:j]):                    maxLen = max(maxLen, j-i)        return maxLen                    def isValid(self, s):        stack = []        for i in range(len(s)):            if s[i] == "(":                stack.append("(")            elif stack and stack[-1] == "(": # having ")" coming                stack.pop()            else:                return False        return stack == []