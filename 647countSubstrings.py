'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # expand from the center     # O(N^2) for T and O(1) for S, N = len(S)    def countSubstrings1(self, s: str) -> int:        N = len(s)        res = 0        # 2N-1 meaning possible center positions, i.e.,         # between letters (N-1), or on the letters (N)        for center in range(2*N - 1): # 2N            l = center // 2 # loop l from 0 to N            r = l + center % 2 # r = l or l+1; odd length or even length            while l >= 0 and r < N and s[l] == s[r]:                res += 1                l -= 1                r += 1        return res                    # self-made, loop + memo    def countSubstrings(self, s: str) -> int:        res = 0        dict_ = {}        for len_ in range(1, len(s)+1):            for idx in range(len(s) - len_ + 1):                sub = s[idx: idx + len_]                if sub not in dict_:                    dict_[sub] = self. isPal(sub)                # print (sub, dict_[sub])                res += dict_[sub]        return res                    def isPal(self, s):        return s == s[::-1]