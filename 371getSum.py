'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # O(1) for S and T    def getSum(self, a: int, b: int) -> int:        x, y = abs(a), abs(b)        # ensure that abs(a) >= abs(b)        if x < y:            return self.getSum(b, a)                # abs(a) >= abs(b) -->         # a determines the sign        sign = 1 if a > 0 else -1                if a * b >= 0:            # sum of two positive integers x + y            # where x > y            while y:                answer = x ^ y                carry = (x & y) << 1                x, y = answer, carry        else:            # difference of two integers x - y            # where x > y            while y:                answer = x ^ y                borrow = ((~x) & y) << 1                x, y = answer, borrow                return x * sign            # python specific    def getSum1(self, a: int, b: int) -> int:        # 32 bits integer max        MAX = 0x7FFFFFFF        # mask to get last 32 bits        mask = 0xFFFFFFFF        while b != 0:            # ^ get different bits and & gets double 1s, << moves carry            a, b = (a ^ b) & mask, ((a & b) << 1) & mask        # if a is negative, get a's 32 bits complement positive first        # then get 32-bit positive's Python complement negative        return a if a <= MAX else ~(a ^ mask)                