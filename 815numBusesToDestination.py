'''keys: Solutions:Similar: T:S:'''from typing import Listimport collectionsclass Solution:    # T: O(sum((N-i)*bi) + N^2), N as number of buses    # bi as the numebr of stops on ith bus. route map construct + bfs    # S: O(N^2 + sum(bi))    def numBusesToDestination(self, routes: List[List[int]], S: int, T: int) -> int:        stop2route = collections.defaultdict(set)        for i, route in enumerate(routes):            for j in route:                stop2route[j].add(i) # k: stop, v: route                queue = [(S, 0)]        seen = set([S])        for stop, ct in queue:            if stop == T:                return ct            for i in stop2route[stop]:                for j in routes[i]:                    if j not in seen:                        queue.append((j, ct + 1))                        seen.add(j)                routes[i] = []  # this line is important to reduce time                # it eliminates seen route        return -1                                    