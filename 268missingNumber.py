'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:        # bit manipulation; T: O(n), S: O(1)    # using XOR is its own inverse to find the missing element in linear time.    def missingNumber3(self, nums):        missing = len(nums)        for i, num in enumerate(nums):            missing ^= i ^ num        return missing        # T: O(n), S: O(1)    def missingNumber2(self, nums):        expected_sum = len(nums)*(len(nums)+1)//2        actual_sum = sum(nums)        return expected_sum - actual_sum            # self-made, O(n) for T    def missingNumber1(self, nums: List[int]) -> int:        for v in range(len(nums)+1):            if v not in nums:                return v                                    