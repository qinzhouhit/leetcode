'''keys:  isalpha()Solutions:Similar: T:S:'''from typing import Listclass Solution:    # reversed pointer    def reverseOnlyLetters2(self, S):        ans = []        j = len(ans) - 1        for i, x in enumerate(S):            if x.isalpha():                while not S[j].isalpha():                    j -= 1                ans.append(S[j])                j -= 1            else:                ans.append(x)                return "".join(ans)            # O(N) for T and S, N as the length of S    def reverseOnlyLetters1(self, S: str) -> str:        letters = [c for c in S if c.isalpha()]        ans = []        for c in S:            if c.isalpha():                ans.append(letters.pop())            else:                ans.append(c)        return "".join(ans)            # two pointer    def reverseOnlyLetters(self, S: str) -> str:        if not S:            return ""        S = list(S)        l, r = 0, len(S) - 1        while l <= r:            if not S[l].isalpha():                l += 1            elif not S[r].isalpha():                r -= 1            else:            # if S[l].isalpha() and S[r].isalpha():                S[l], S[r] = S[r], S[l]                l += 1                r -= 1        return "".join(S)