'''keys: Solutions:Similar: 769T:S:'''from typing import Listclass Solution:        # T: O(N), S: O(1)     def numTimesAllBlue1(self, light: List[int]) -> int:        right = res = 0        for i, a in enumerate(light, 1): # 1 means indexing starting at 1            right = max(right, a) # the number of the right most lighted bulb.            res += right == i        return res            # T: O(N), S: O(N)     # e.g., [3,2,4,1,5], output = 2    def numTimesAllBlue2(self, light: List[int]) -> int:        n, maxBlue, res = len(light), 0, 0        on = [0] * n                for i in range(n):            on[light[i] - 1] = 1            # Increase the end of blue bulbs sequence starting from 0            while maxBlue < n and on[maxBlue]:                maxBlue += 1            # If number of blue bulbs is equal to number of switched on bulbs            res += maxBlue == i + 1        return res                      # LTE    def numTimesAllBlue(self, light: List[int]) -> int:        def cmp(l1, l2):            for i in range(len(l1)):                if l1[i] == 1 and l2[i] != 1 or \                l1[i] != 1 and l2[i] == 1:                    return False            return True                    def update_blue():            for i in range(n, -1, -1):                if on[i] == 1:                    right = i                    break                            for i in range(1, right+1):                if on[1:i+1] and all(on[1:i+1]):                    blue[i] = 1                if not light: return 0        n = len(light)        on = [0]*(n+1)        blue = [0]*(n+1)        res = 0        for l in light:            if l == 1:                on[l] = 1                blue[l] = 1            else:                on[l] = 1            update_blue()            if cmp(on, blue): res += 1        return ressol = Solution()print (sol.numTimesAllBlue2([3,2,4,1,5]))