'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # official    def removeComments(self, source: List[str]) -> List[str]:        if not source: return []        in_block = False # a block comment        res = []                for line in source:            i = 0            if not in_block:                newline = []            while i < len(line):                if line[i:i+2] == "/*" and not in_block:                    in_block = True                    i += 1                elif line[i:i+2] == "*/" and in_block:                    in_block = False                    i += 1                elif not in_block and line[i:i+2] == "//":                    break # break the while loop                elif not in_block:                    newline.append(line[i])                i += 1            if newline and not in_block:                res.append("".join(newline))        return res        # some solution    def removeComments1(self, source):        """        :type source: List[str]        :rtype: List[str]        """        res, buffer, block_comment_open = [], '', False        for line in source:            i = 0            while i < len(line):                char = line[i]                # "//" -> Line comment.                if char == '/' and (i + 1) < len(line) and \                    line[i + 1] == '/' and not block_comment_open:                    i = len(line) # Advance pointer to end of current line.                # "/*" -> Start of block comment.                elif char == '/' and (i + 1) < len(line) and \                    line[i + 1] == '*' and not block_comment_open:                    block_comment_open = True                    i += 1                # "*/" -> End of block comment.                elif char == '*' and (i + 1) < len(line) and \                    line[i + 1] == '/' and block_comment_open:                    block_comment_open = False                    i += 1                # Normal character. Append to buffer if not in block comment.                elif not block_comment_open:                    buffer += char                i += 1            if buffer and not block_comment_open:                res.append(buffer)                buffer = ''        return res                sol = Solution()print (sol.removeComments(["/*Test program */", "int main()", "{ ", "  // variable declaration ", "int a, b, c;", "/* This is a test", "   multiline  ", "   comment for ", "   testing */", "a = b + c;", "}"]))