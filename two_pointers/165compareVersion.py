'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # two pointers, one pass    def compareVersion1(self, version1: str, version2: str) -> int:        p1 = p2 = 0        n1, n2 = len(version1), len(version2)        # compare versions        while p1 < n1 or p2 < n2:            i1, p1 = self.get_next_chunk(version1, n1, p1)            i2, p2 = self.get_next_chunk(version2, n2, p2)                        if i1 != i2:                return 1 if i1 > i2 else -1        # the versions are equal        return 0        def get_next_chunk(self, version: str, n: int, p: int) -> List[int]:        # if pointer is set to the end of string, return 0        if p >= n:            return 0, p        # find the end of chunk        p_end = p        while p_end < n and version[p_end] != '.':            p_end += 1        # retrieve the chunk        i = int(version[p:p_end]) if p_end != n - 1 else int(version[p:n])        # return the beginning of next chunk        p = p_end + 1 # notice that val of idx at p_end is "."        return i, p            # T: O(N+M+max(N,M)), N and M aslengths of input strings    # S: O(N+M)    def compareVersion(self, version1: str, version2: str) -> int:        nums1 = version1.split('.')        nums2 = version2.split('.')        n1, n2 = len(nums1), len(nums2)                # compare versions        for i in range(max(n1, n2)):            i1 = int(nums1[i]) if i < n1 else 0            i2 = int(nums2[i]) if i < n2 else 0            if i1 != i2:                return 1 if i1 > i2 else -1                # the versions are equal        return 0 