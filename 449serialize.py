'''keys: Solutions:Similar: T:S:'''from typing import List# Definition for a binary tree node.class TreeNode:    def __init__(self, x):        self.val = x        self.left = None        self.right = Noneclass Codec:    # for optimal deserialization better to choose the     # postorder traversal because member/global/static     # variables are not allowed here.    # O(N) for S and T    def serialize(self, root: TreeNode) -> str:        """        Encodes a tree to a single string.        """        if not root: return ""                def postorder(node):            return postorder(root.left) + postorder(root.right)\            + [root.val] if root else []        # return ' '.join(map(str, postorder(root)))        return " ".join(str(v) for v in postorder(root))        def deserialize(self, data: str) -> TreeNode:        """        Decodes your encoded data to tree.        """        def helper(lower = float('-inf'), upper = float('inf')):            # use upper and lower boundaries to check whether we should add null            if not data or data[-1] < lower or data[-1] > upper:                return None                        val = data.pop()            root = TreeNode(val)            root.right = helper(val, upper) # right node must have value no smaller than parent            root.left = helper(lower, val)            return root                            data = [int(x) for x in data.split(' ') if x]        return helper()                # Your Codec object will be instantiated and called as such:# codec = Codec()# codec.deserialize(codec.serialize(root))