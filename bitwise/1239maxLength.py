'''keys: Solutions:Similar: T:S:'''from typing import Listfrom collections import Counterfrom itertools import chain, combinationsclass Solution:    # some other method    # O(N^2) for S and T     def maxLength2(self, arr):        maxlen = 0        unique = ['']                for word in arr:            for j in unique:                newWord = word + j                if len(newWord) == len(set(newWord)):                    unique.append(newWord)                    maxlen = max(maxlen, len(newWord))                            return maxlen    # T: O(N^2); S: O(N^2)    # https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/discuss/414172/PythonC%2B%2BJava-Set-Solution    def maxLength(self, A):        dp = [set()]        for a in A:            if len(set(a)) < len(a): # drop those string with duplicated chars                continue             a = set(a)            for c in dp[:]:                if a & c: # element-wise AND operation                    continue  # if there is any overlap                dp.append(a | c) # element-wise OR operation        return max(len(a) for a in dp)            # self-made slow    def maxLength1(self, arr: List[str]) -> int:        if not arr:            return 0                def unique(string):            dict_ = Counter(string)            for k, v in dict_.items():                if v > 1:                    return False            return True                def powerset(iterable):            s = list(iterable)            return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))                                if len(arr) == 1:            if unique(arr[0]):                return len(arr[0])                max_ = 0        per = powerset(arr)        # print (per)        for s in per:            s = "".join(s)            if unique(s):                max_ = max(max_, len(s))        return max_            sol = Solution()sol.maxLength2(["un","iq","ue"])