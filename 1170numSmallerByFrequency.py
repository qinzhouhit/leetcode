'''keys: Solutions:Similar:T:S:'''from typing import Listimport bisectclass Solution:    # concise    def numSmallerByFrequency1(self, queries: List[str], words: List[str]) -> List[int]:        # 1. Capture counts of smallest characters in each word, and sort         # the list in ascending order.        W = sorted([w.count(min(w)) for w in words])                res = []        for q in queries:            # 2. Perform binary search of smallest characters in each query            # against the sorted list from step#1.            cnt = q.count(min(q))            idx = bisect.bisect(W, cnt)            res.append(len(words) - idx)        return res            # self-made    def numSmallerByFrequency(self, queries: List[str], words: List[str]) -> List[int]:        def cal(s):            tmp = sorted(list(s))            min_ = tmp[0]            ct = 0            for c in tmp:                if min_ == c:                    ct += 1            return ct                f_q = [cal(s) for s in queries]        f_w = [cal(s) for s in words]                res = []        for i in range(len(queries)):            tmp = 0            for j in range(len(words)):                if f_q[i] < f_w[j]:                    tmp += 1            res.append(tmp)                return res            