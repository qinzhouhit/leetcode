'''keys: Solutions:Similar:T:S:'''from typing import Listclass Solution:    # recursion with memoization    # based on last version    def helper1(self, nums, preindex, curindex, memo):        if curindex == len(nums):            return 0                def lengthOfLIS1(self, nums: List[int]) -> int:        memo = [[-1]*(len(nums) + 1) for _ in range(len(nums))]        return self.helper1(nums, -1, 0, memo)            # brute force    # T: O(2^n) for recursion; S: O(n^2)    def lengthOfLIS(self, nums: List[int]) -> int:        return self.helper(nums, float("-inf"), 0)        def helper(self, nums, prev, cur):        # prev: previous small element        # cur: current index        if cur == len(nums):            return 0                taken = 0        if nums[cur] > prev:            taken = 1 + self.helper(nums, nums[cur], cur + 1)        nottaken = self.helper(nums, prev, cur + 1)        return max(taken, nottaken)                        