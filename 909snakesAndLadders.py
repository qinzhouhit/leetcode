'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    def snakesAndLadders(self, board: List[List[int]]) -> int:        # BFS        n  = len(board)        need = {1: 0} # k: number in each grid, v: how many steps needed to get to k        bfs = [1] # current grid, queue        for g in bfs: # g for grid            for i in range(g+1, g+7):                r, c = (i - 1) // n, (i - 1) % n                # ~ means counting from the right end                # since left corner is row 5 and col 0                nxt = board[~r][c if r % 2 == 0 else ~c]                if nxt > 0: i = nxt                if i == n * n:                    return need[i] + 1 # + 1 for the current move                if i not in need:                    need[i] = need[i] + 1                    bfs.append(i)        return -1        #O(N^2) for S and T    def snakesAndLadders(self, board):        N = len(board)        def get(s):            # Given a square num s, return board coordinates (r, c)            quot, rem = divmod(s-1, N) #             row = N - 1 - quot            col = rem if row%2 != N%2 else N - 1 - rem            return row, col        dist = {1: 0}        queue = collections.deque([1])        while queue:            s = queue.popleft()            if s == N*N: return dist[s]            for s2 in range(s+1, min(s+6, N*N) + 1):                r, c = get(s2)                if board[r][c] != -1:                    s2 = board[r][c]                if s2 not in dist:                    dist[s2] = dist[s] + 1                    queue.append(s2)        return -1