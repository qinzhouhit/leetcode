'''keys: Solutions:Similar: T:S:'''from typing import List# Definition for a binary tree node.class TreeNode:    def __init__(self, val=0, left=None, right=None):        self.val = val        self.left = left        self.right = rightclass Solution:    # one could always insert new node as a child of the leaf    # recursion: O(H) for S and T    def insertIntoBST(self, root: TreeNode, val: int) -> TreeNode:        if not root:            return TreeNode(val)                if val > root.val:            # insert into the right subtree            root.right = self.insertIntoBST(root.right, val)        else:            # insert into the right subtree            root.left = self.insertIntoBST(root.left, val)        return root                # iteration; O(H) for T and O(1) for S    def insertIntoBST1(self, root: TreeNode, val: int) -> TreeNode:        node = root        while node:            # insert into the right subtree            if val > node.val:                # insert right now                if not node.right:                    node.right = TreeNode(val)                    return root                else:                    node = node.right            # insert into the left subtree            else:                # insert right now                if not node.left:                    node.left = TreeNode(val)                    return root                else:                    node = node.left        return TreeNode(val)        