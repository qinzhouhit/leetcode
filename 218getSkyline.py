'''keys: https://www.youtube.com/watch?v=GSBLe8cKu0sSolutions:Similar: T:S:'''from typing import Listfrom heapq import heappush, heappopclass Solution:    # T: O(nlogn); S: O(n)    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:        # https://leetcode.com/problems/the-skyline-problem/discuss/61261/10-line-Python-solution-104-ms        # 不难发现这些关键点的特征是：竖直线上轮廓升高或者降低的终点        # 所以核心思路是：从左至右遍历建筑物，记录当前的最高轮廓，如果产生变化则记录一个关键点                # two types of events (x1, x2, x3): at position x1, with height x2,        # until ending position x3        # 1st: height increases (L, -H); 2nd: height decreases to 0 (R, 0)        # end-building events(acts as buildings with 0 height)        # in the 1st one, R of (L, -H, R) is used in heapq        # same entering idx, process the highest first; same leaving idx,        # process the lowest first -> reduce processing duplicates heights        events = [(L, -H, R) for L, R, H in buildings]        # the below line is faster and shorter than list(set((R, 0, None)         # for L, R, H in buildings)).        events += list({(R, 0, 0) for _, R, _ in buildings})        # sort by ascending L, then ascending H (so use -H)        # since we maintain a heapq for current highest height        events.sort()                # res: result, [pos, height]        # live: heapq, [-height, ending position], i.e., [-H, R]        # -height making the min heaq into max heap, R for effective length of         # the current height        res = [[0, 0]]        hp = [(0, float("inf"))]        for pos, negH, R in events:            # erase the skyline that reaching the R            # hp: [negH, R]            # if the curPos larger than R in the heap, earse the skyline            # e.g., decreasing height events, from (7, 15) to (7, 12)            while pos >= hp[0][1]:                 heappop(hp) # don't have to heapify it first            # if height increasing (entering building) event:             # add it to the heap            if negH:                 heappush(hp, (negH, R))            # if the cuurent highest height changes, record it as the res            if res[-1][1] != -hp[0][0]:                res += [ [pos, -hp[0][0]] ]        return res[1:]        sol = Solution()print (sol.getSkyline([ [2, 9, 10], [3, 7, 15], [5, 12 ,12], [15, 20, 10], [19, 24, 8] ]))