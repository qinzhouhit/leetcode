'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # O(n) for S and T, n as the length of the input string    def minRemoveToMakeValid(self, s: str) -> str:        indexes_to_remove = set()        stack = []        for i, c in enumerate(s):            if c not in "()":                continue            if c == "(":                stack.append(i)            elif not stack:                indexes_to_remove.add(i)            else:                stack.pop()        indexes_to_remove = indexes_to_remove.union(set(stack))        string_builder = []        for i, c in enumerate(s):            if i not in indexes_to_remove:                string_builder.append(c)        return "".join(string_builder)        def minRemoveToMakeValid1(self, s: str) -> str:        def delete_invalid_closing(string, open_symbol, close_symbol):            sb = []            balance = 0            for c in string:                if c == open_symbol:                    balance += 1                if c == close_symbol:                    if balance == 0:                        continue                    balance -= 1                sb.append(c)            return "".join(sb)            # Note that s[::-1] gets the reverse of s.        s = delete_invalid_closing(s, "(", ")")        print(s)        s = delete_invalid_closing(s[::-1], ")", "(")        print(s)        return s[::-1]    sol = Solution()print (sol.minRemoveToMakeValid1("lee(t(c)o)de)"))