'''keys: Solutions:Similar:T:S:''''''_addToValue: add a number to all the values in hashmap_addToKey: add a number to all the keys in hashmapreturn the sum of results from all the _get function'''import collectionsdef hashMap(queryType, query):    h = collections.defaultdict(int)    res = 0    key_offset = 0    val_offset = 0    def _insert(q):        if q[0] not in h:            h[q[0]] = q[1]        else:            return False        def _get(q, res):        if q[0] not in h:            return False        else:            res += h[q[0]]            return res        def _addToValue(q):        if not h:            return False        for k in h.copy():            h[k] = h[k]+q[0]          def _addToKey(q):        if not h:            return False        # prev_keys = list(h.keys())        copyh = h.copy()        for k, v in copyh.items():            # del h[k]            h[k+q[0]] = v                # new_keys = [v+q[0] for v in prev_keys]        # for k in new_keys:        #     h[k] = copyh[k-q[0]]        #     del h[k-q[0]] # previous key                for i, val in enumerate(queryType):        q = query[i]        if val == "insert":            _insert(q)            print (res, q, h)        if val == "get":            res = _get(q, res)            print (res, q, h)        if val == "addToValue":            _addToValue(q)            print (res, q, h)        if val == "addToKey":            _addToKey(q)            print (res, q, h)    return reshashMap(["insert",  "get",  "insert",  "addToValue",  "addToValue",  "addToValue",  "insert",  "addToKey",  "get",  "insert"], [[2,1],  [2],  [1,3],  [-1],  [0],  [3],  [4,-5],  [3],  [4],  [1,1]])