'''keys: Solutions:Similar: T:S:'''from typing import Listimport collectionsimport bisectclass TimeMap:    # O(1)     def __init__(self):        """        Initialize your data structure here.        """        self.M = collections.defaultdict(list)            def set(self, key: str, value: str, timestamp: int) -> None:        self.M[key].append((timestamp, value))            '''    bisect is the same as bisect_right    chr(127) is the char#127 in ASCII table. It is larger than all     the common used character.    ...    The ascii code range of lower char is [97, 122], thus chr(127)     can be used to make sure the located index from     bisect.bisect(A, (timestamp, chr(127))) can satisfy the condition:     timestamp_prev <= timestamp. In fact, chr(ascii_v) can also be     used here where ascii_v's range is [123, 127]. Hope it helps.    '''    def get(self, key: str, timestamp: int) -> str:        A = self.M.get(key, None) # return None if no such key        if A == 'None':            return ""        i = bisect.bisect(A, (timestamp, chr(127)))        return A[i-1][1] if i else ""# Your TimeMap object will be instantiated and called as such:# obj = TimeMap()# obj.set(key,value,timestamp)# param_2 = obj.get(key,timestamp)