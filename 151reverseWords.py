'''keys: Solutions:Similar:T:S:'''from collections import dequeclass Solution:    # reverse the whole string and then reverse each word    # O(N) for S and T    # trim the spaces and convert to array;     # reverse the whole arrray    # reverse each word, then join    def trim_spaces(self, s: str) -> list:        left, right = 0, len(s) - 1        # remove leading spaces        while left <= right and s[left] == ' ':            left += 1                # remove trailing spaces        while left <= right and s[right] == ' ':            right -= 1                # reduce multiple spaces to single one        output = []        while left <= right:            if s[left] != ' ':                output.append(s[left])            elif output[-1] != ' ': # making multiple middle spaces into one                output.append(s[left])            left += 1                return output                def reverse(self, l: list, left: int, right: int) -> None:        while left < right:            l[left], l[right] = l[right], l[left]            left, right = left + 1, right - 1                def reverse_each_word(self, l: list) -> None:        n = len(l)        start = end = 0                while start < n:            # go to the end of the word            while end < n and l[end] != ' ':                end += 1            # reverse the word            self.reverse(l, start, end - 1)            # move to the next word            start = end + 1 # skip the space            end += 1                    def reverseWords3(self, s: str) -> str:        # converst string to char array         # and trim spaces at the same time        l = self.trim_spaces(s)                # reverse the whole string        self.reverse(l, 0, len(l) - 1)                # reverse each word        self.reverse_each_word(l)                return ''.join(l)                    # deque one, O(N) for S and T    def reverseWords2(self, s: str) -> str:        l, r = 0, len(s) - 1        # remove leading spaces        while l <= r and s[l] == " ":            l += 1        # remove trailing spaces        while l <= r and s[r] == " ":            r -= 1                d, word = deque(), []        # push word by word in front of deque        while l <= r:            if s[l] == " " and word:                d.appendleft("".join(word))                word = []            elif s[l] != " ":                word.append(s[l])            l += 1        d.appendleft("".join(word)) # for the last word                return " ".join(d)                    # short one,     def reverseWords1(self, s: str) -> str:        return " ".join(reversed(s.split()))        # my raw version, O(N) for S and T    # N as the number of characters in the input string    def reverseWords(self, s: str) -> str:        if not s:            return ""        attrs = [v for v in s.split(" ") if v != ""]        return " ".join(attrs[::-1])        sol = Solution()sol.reverseWords2("the sky is blue")            