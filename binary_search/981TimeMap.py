'''keys: Solutions:Similar: T:S:'''from typing import Listimport collectionsimport bisectclass TimeMap:        def __init__(self):        """        Initialize your data structure here.        """        self.M = collections.defaultdict(list)            # T: O(1)     def set(self, key: str, value: str, timestamp: int) -> None:        self.M[key].append([timestamp, value])    # implement    def get(self, key: str, timestamp: int) -> str:        arr = self.m.get(key, None) # a list of tuple        if arr == None:            return ""        n = len(arr)        l, r = 0, n        while l < r:            mid = l + (r-l)//2            if arr[mid][0] <= timestamp:                l = mid + 1            elif arr[mid][0] > timestamp:                r = mid            # else:            #     return arr[mid][1]        return "" if r == 0 else arr[r-1][1]            '''    T: O(logN), N as the number entries in timemap; S: O(N)    bisect is the same as bisect_right    chr(127) is the char#127 in ASCII table. It is larger than all     the common used character. You can also use chr(255).    The ascii code range of lower char is [97, 122], thus chr(127)     can be used to make sure the located index from     bisect.bisect(A, (timestamp, chr(127))) can satisfy the condition:     timestamp_prev <= timestamp. In fact, chr(ascii_v) can also be     used here where ascii_v's range is [123, 127].     >>> if M[key]=[(1,"a"),(1,"b"),(2,"c")]    and you do obj.get(key,1)    bisect will return index 2, because, in tuple comparison, python will     compare element by element.    And 1=1 and chr(127)>b, you will get index 2    So you need to use A[i-1][1] instead of using A[i][1]    '''    def get1(self, key: str, timestamp: int) -> str:        A = self.M.get(key, None) # return None if no such key        if A == 'None':            return ""        i = bisect.bisect(A, (timestamp, chr(127)))        return A[i-1][1] if i else ""# Your TimeMap object will be instantiated and called as such:# obj = TimeMap()# obj.set(key,value,timestamp)# param_2 = obj.get(key,timestamp)