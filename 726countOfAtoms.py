'''keys: Solutions:Similar: T:S:'''from typing import Listimport collectionsclass Solution:    # recursion    # T: O(N^2), N as the length of the formula    # S: O(N) for the formula    def countOfAtoms(self, formula: str) -> str:        def parse():            '''            parses the formula from index i, returning a map count from             names to multiplicities (the number of times that name is recorded).            '''            N = len(formula)            count = collections.Counter()            while (self.i < N and formula[self.i] != ")"):                if (formula[self.i] == '('):                    self.i += 1                    for name, v in parse().items():                        count[name] += v                else:                    i_start = self.i                    self.i += 1                    while (self.i < N and formula[self.i].islower()):                        self.i += 1 # lower letters following capitals                    name = formula[i_start: self.i] # name of the element                    i_start = self.i # start for new element                    while (self.i < N and formula[self.i].isdigit()):                        self.i += 1 # count                    count[name] += int(formula[i_start: self.i] or 1) # record count of the lement                                self.i += 1            i_start = self.i            while (self.i < N and formula[self.i].isdigit()):                self.i += 1            if i_start < self.i:                multiplicity = int(formula[i_start: self.i])                for name in count:                    count[name] *= multiplicity            return count                self.i = 0        ans = []        count = parse()        for name in sorted(count):            ans.append(name)            multiplicity = count[name]            if multiplicity > 1:                ans.append(str(multiplicity))        return "".join(ans)      sol = Solution()print (sol.countOfAtoms("K4(ON(SO3)2)2"))              