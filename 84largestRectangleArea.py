'''keys: Solutions:Similar:T:S:'''from typing import Listclass Solution:    # using stack, O(n) for S and T    def largestRectangleArea3(self, heights: List[int]) -> int:        stack = [-1]        maxarea = 0        for i in range(len(heights)):            while stack[-1] != -1 and heights[stack[-1]] >= heights[i]:                maxarea = max(maxarea, \                              heights[stack.pop()]*(i-stack[-1]-1))            stack.append(i)        while stack[-1] != -1:            maxarea = max(maxarea, heights[stack.pop()]*\                          len(heights)-stack[-1]-1)        return maxarea                                            # divide and conquer, TLE    # T: ave: O(nlogn), worst: O(n^2)    # S: O(n) for the recursion depth n    def helper(self, heights, start, end):        if start > end:            return 0        minindex = start        for i in range(start, end+1):            if heights[minindex] > heights[i]:                minindex = i # find the min height        return max(heights[minindex] * (end - start + 1),\               max(self.helper(heights, start, minindex-1),\                self.helper(heights, minindex+1, end)))            def largestRectangleArea2(self, heights: List[int]) -> int:        return self.helper(heights, 0, len(heights)-1)                # O(n^2) brutal force, TLE    # find the bar of minimum height for current pair     # by using the minimum height bar of the previous pair.    def largestRectangleArea1(self, heights: List[int]) -> int:        maxarea = 0        for i in range(len(heights)):            minheight = float("inf")            for j in range(i, len(heights)):                minheight = min(minheight, heights[j])                maxarea = max(maxarea, minheight * (j-i+1))        return maxarea                    # brutal force, TLE    # T: O(n^3), S: O(1)    def largestRectangleArea(self, heights: List[int]) -> int:        maxarea = 0        for i in range(len(heights)):            for j in range(i, len(heights)):                minheight = float("inf")                for k in range(i, j+1):                    minheight = min(minheight, heights[k])                maxarea = max(maxarea, minheight * (j-i+1))        return maxarea