'''keys: Solutions: https://www.youtube.com/watch?v=zQqku1AXVF8Similar: T:S:'''from typing import List# Definition for a binary tree node.class TreeNode:    def __init__(self, val=0, left=None, right=None):        self.val = val        self.left = left        self.right = right        class Solution:    '''    In total, the number of moves from that leaf to or from its     parent is excess = Math.abs(num_coins - 1). nums_coins of this     node is from node.val and all the coins from left and right children,    i.e., L and R. -1 means leaving 1 coin at cur node.    Afterwards, we never have to consider this leaf again in the rest of our calculation.    So, for each node, we only need to consider its own children    '''    # O(N) for S and T, N as the number of nodes    def distributeCoins(self, root: TreeNode) -> int:        self.ans = 0        def dfs(node):            if not node: return 0            # flow(L) = abs(balance(left))            # flow(R) = abs(balance(right))            L, R = dfs(node.left), dfs(node.right)            # ans += flow(R) + flow(L)            self.ans += abs(L) + abs(R)            # balance(root) = v - 1 + balance(left) + balance(right)            return node.val + L + R - 1        dfs(root)        return self.ans