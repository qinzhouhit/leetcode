'''keys: Solutions:Similar: T:S:'''from typing import Listfrom collections import Counterclass Solution:    # official, sort + 2pointers, just in case if the lists are sorted    def intersect2(self, nums1: List[int], nums2: List[int]) -> List[int]:        nums1.sort()        nums2.sort()        i, j, k = 0, 0, 0        while i < len(nums1) and j < len(nums2):            if nums1[i] < nums2[j]:                i += 1            elif nums1[i] > nums2[j]:                j += 1            else:                nums1[k] = nums1[i] # using the space of nums1                k += 1                 i += 1                j += 1        return nums1[:k]                # official, hashmap, T: O(n+m); S: O(min(m, n))    def intersect1(self, nums1: List[int], nums2: List[int]) -> List[int]:        if not nums1 or not nums2: return []        if len(nums1) < len(nums2): return self.intersect1(nums2, nums1)        m = Counter(nums2) # nums2: the longer one                k = 0        for num in nums2:            ct = m.get(num, 0)            if ct > 0:                nums1[k] = num                k += 1                m[num] = ct - 1        return nums1[:k]                            # self-made, T: O(n+m); S: O(m + n)    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:        if not nums1 or not nums2: return []        if len(nums1) < len(nums2): return self.intersect(nums2, nums1)        dict1 = Counter(nums1)        dict2 = Counter(nums2)        res = [] # len(nums1) >= len(nums2)        for k, v in dict2.items():            while k in nums1 and dict1[k] > 0 and v > 0:                dict1[k] -= 1                v -= 1                res.append(k)        return res