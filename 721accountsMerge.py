'''keys: Solutions:Similar: T:S:'''from typing import Listimport collectionsclass Solution:    '''    For each account, draw the edge from the first email to all other emails.    '''    # T: O(∑a_iloga_i), where a_i is the length of accounts[i]    # S: O(∑a_i), the space used by our graph and our search.    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:        email2name = {}        graph = collections.defaultdict(set)        for acc in accounts:            name = acc[0]            for email in acc[1:]:                graph[acc[1]].add(email)                graph[email].add(acc[1])                email2name[email] = name                seen = set()        res = []        for email in graph:            if email not in seen:                seen.add(email)                stack = [email]                component = []                while stack:                    node = stack.pop()                    component.append(node)                    for nei in graph[node]:                        if nei not in seen:                            seen.add(nei)                            stack.append(nei)                # print ([email2name[email]] + sorted(component))                res.append([email2name[email]] + sorted(component))        return res                