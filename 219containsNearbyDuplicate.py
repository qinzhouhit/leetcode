'''keys: Solutions:Similar: T:S:'''from typing import Listfrom sortedcontainers import SortedListclass Solution:        # binary search tree    # O(nlog(min(k, n)))    def containsNearbyDuplicate2(self, nums: List[int], k: int) -> bool:        order = SortedList()        for i in range(len(nums)):            if nums[i] in order:                return True            order.add(nums[i])            if len(order) > k:                order.remove(nums[i-k])        return False            # concise hashmap    # T: O(n), S: O(min(n,k))    def containsNearbyDuplicate1(self, nums, k):        dic = {}        for i, v in enumerate(nums):            if v in dic and i - dic[v] <= k:                return True            dic[v] = i        return False        # self-made, O(n)        def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:        if not nums: return False                hashmap = collections.defaultdict(list)        n = len(nums)        for idx, num in enumerate(nums):            hashmap[num].append(idx)        for i in range(n):            cands = hashmap[nums[i]]            for cand in cands:                if i != cand and abs(i - cand) <= k:                    return True        return False        