'''keys: Solutions:Similar:T:S:'''from typing import Listimport bisect# https://leetcode.com/problems/range-module/discuss/244194/Python-solution-using-bisect_left-bisect_right-with-explanation# https://leetcode.com/problems/range-module/discuss/169353/Ultra-concise-Python-(only-6-lines-of-actual-code)-(also-236ms-beats-100)class RangeModule:    def __init__(self):        # This array consists of a number of sorted pairs of start and end         # values. So, it always has an even number of elements.        self.track = []        # O(n)    def addRange(self, left: int, right: int) -> None:        start = bisect.bisect_left(self.track, left)        end = bisect.bisect_right(self.track, right)                subtrack = []        if start % 2 == 0:            subtrack.append(left)        if end % 2 == 0:            subtrack.append(right)			        self.track[start:end] = subtrack            # O(logn)    def queryRange(self, left: int, right: int) -> bool:        start = bisect.bisect_right(self.track, left)        end = bisect.bisect_left(self.track, right)		        return start == end and start % 2 == 1            # O(n)    def removeRange(self, left: int, right: int) -> None:        start = bisect.bisect_left(self.track, left)        end = bisect.bisect_right(self.track, right)                subtrack = []        if start % 2 == 1:            subtrack.append(left)        if end % 2 == 1:            subtrack.append(right)			        self.track[start:end] = subtrack    # Your RangeModule object will be instantiated and called as such:# obj = RangeModule()# obj.addRange(left,right)# param_2 = obj.queryRange(left,right)# obj.removeRange(left,right)        