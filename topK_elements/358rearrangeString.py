'''keys: Solutions:Similar:T:S:'''from typing import List# python's heapq is min heap by default. So create a customized heap# order is to have each element on the heap to be a tuple. The first# tuple element is the one will be accpeted to be normal python # comparisons. Assign the count value to be negative, so that the # heap to be a max heap.from typing import Listfrom collections import Counter, dequeimport heapqclass Solution:    # T: O(nlog26), i.e., O(n)    # https://leetcode.com/problems/rearrange-string-k-distance-apart/discuss/83192/Java-7-version-of-PriorityQueue-O(nlogn)-with-comments-and-explanations    # consider the chars with max frequency first    # sort by frequency first, use -frequency in heapq, then sort by    # lexciographical order, with count as key    def rearrangeString(self, s: str, k: int) -> str:        res = ""        if not s: return res                maxHeap = []        hashmap = Counter(s)        for c, ct in hashmap.items():            heapq.heappush(maxHeap, (-ct, c))        waitQueue = deque()        while maxHeap:            ct, c = heapq.heappop(maxHeap)            res += c            # -(freq - 1) = ct + 1            waitQueue.append((ct + 1, c))            if len(waitQueue) < k: # this is important since k could be 0                continue             # i.e., len(waitQueue) == k, already place k chars            freq, c = waitQueue.popleft()            if -freq > 0: # still char left                heapq.heappush(maxHeap, (freq, c))                        return res if len(res) == len(s) else ""        