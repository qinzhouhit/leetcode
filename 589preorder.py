'''keys: Solutions:Similar: T:S:'''from typing import List# Definition for a Node.class Node:    def __init__(self, val=None, children=None):        self.val = val        self.children = childrenclass Solution:    # O(N) for S and T; iterative    # reversed function is much faster than [::-1]    def preorder(self, root: 'Node') -> List[int]:        if not root:            return []                stack = [root]        res = []        while stack:            node = stack.pop() # right side            res.append(node.val)            for child in node.children:                stack.append(node)        return res        # recursive    def preorder1(self, root: 'Node') -> List[int]:        if not root:            return []        ans = [root.val]        for child in root.children:            tmp = self.preorder(child)            if tmp:                ans.extend(tmp)        return ans                                                                            