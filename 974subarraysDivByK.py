'''keys: Solutions:Similar:T:S:'''from typing import Listclass Solution:    # O(N) for S and T, N as len(A)    def subarraysDivByK(self, A: List[int], K: int) -> int:        res = 0        prefix = 0        count = [1] + [0] * K        for a in A:            prefix = (prefix + a) % K            res += count[prefix]            count[prefix] += 1        return res            def subarraysDivByK1(self, A: List[int], K: int) -> int:        ct = 0        prefix = 0        h = {0:1} # k: prefix sum % K, v: appearance of such case        for val in A:            prefix = (prefix + val) % K            # first time seeing prefix doesn't mean anything            # second time seeing it means we have subarray we want            ct += h.get(prefix, 0)             # prefix sum ct += 1            h[prefix] = h.get(prefix, 0) + 1        return ct