'''keys: Solutions:Similar: T:S:'''from typing import Listfrom heapq import heappush, heappushpop, heappop    # two heaps, O(logn)class MedianFinder3:    def __init__(self):        self.heaps = [], []            # Max-heap small has the smaller half of the numbers.    # Min-heap large has the larger half of the numbers.    # "larger" has one more element than "small"    def addNum(self, num):        small, large = self.heaps        # move the minimum element of "large" into "small"        heappush(small, -heappushpop(large, num))        if len(large) < len(small):            heappush(large, -heappop(small))    def findMedian(self):        small, large = self.heaps        if len(large) > len(small):            return float(large[0])        return (large[0] - small[0]) / 2.0    # insertion sort: binary sort + insert    # always keep the list sorted     # O(n) for S and Tclass MedianFinder2:    def __init__(self):        """        initialize your data structure here.        """        self.store = []        self.n = len(self.store)    def addNum(self, num: int) -> None:        l, h = 0, len(self.store)-1        while l <= h:            mid = l + (h-l)//2            if num <= self.store[mid]:                h = mid - 1            else:                l = mid + 1        # print (l)        self.store.insert(l, num)        self.n += 1    def findMedian(self) -> float:        # print (self.store)        return (self.store[self.n//2] if self.n%2 else\                (self.store[self.n//2-1] + self.store[self.n//2])/2 )        # brute forceclass MedianFinder1:    def __init__(self):        """        initialize your data structure here.        """        self.store = []    def addNum(self, num: int) -> None:        self.store.append(num)    def findMedian(self) -> float:        self.store.sort()        n = len(self.store)        return (self.store[n//2] if n%2 else\                (self.store[n//2-1] + self.store[n//2])/2 )# Your MedianFinder object will be instantiated and called as such:# obj = MedianFinder()# obj.addNum(num)# param_2 = obj.findMedian()