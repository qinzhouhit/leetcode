'''keys: Solutions:Similar: 300T:S:'''from typing import Listfrom bisect import bisect_leftclass Solution:    # T: O(NlogN); S: O(N); N as length of inputs    # sort + longest increasing subsequence    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:        # sort increasing in first dimension and decreasing on second        # so two envelopes that are equal in the first dimension can never         # be in the same increasing subsequence        envelopes.sort(key=lambda x: (x[0], -x[1]))        def lis(nums):            dp = []            for i in range(len(nums)):                idx = bisect_left(dp, nums[i])                if idx == len(dp):                    dp.append(nums[i])                else:                    dp[idx] = nums[i]            return len(dp)        # extract the second dimension        return lis([i[1] for i in envelopes])    