""" keys: Solutions:Similar: 300T:S:"""from typing import Listfrom bisect import bisect_leftclass Solution:    # T: O(NlogN); S: O(N); N as length of inputs    # sort + longest strictly increasing subsequence (LIS)    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:        # Sort increasing in first dimension and decreasing on second        # So that two envelopes that are equal in the first dimension can never \        # be in the same increasing subsequence. Because we are not supposed to\        # put it in if two have the same first-dimension-size        envelopes.sort(key=lambda x: (x[0], -x[1]))        def lis(nums):            dp = []  # build the subsequence            for i in range(len(nums)):                # A linear scan to find the first element in sub that                 # is greater than or equal to num: bisect_left                idx = bisect_left(dp, nums[i])                 if idx == len(dp):  # If num[i] is greater than any element in dp (sub)                    dp.append(nums[i])                else:                  # Otherwise, replace the first element in sub greater                # than or equal to num                    dp[idx] = nums[i]            return len(dp)                    # extract the second dimension        return lis([envelope[1] for envelope in envelopes])    