'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # O(n) for S and T. n as number of elements in logs    # https://leetcode.com/problems/exclusive-time-of-functions/discuss/105100/Python-Straightforward-with-Explanation    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:        '''        let's look between adjacent events, with duration         time - prev_time. If we started a function, and we have a         function in the background, then it was running during this         time. Otherwise, we ended the function that is most recent in         our stack.        '''        res = [0] * n        stack = []        prev_time = 0                for log in logs:             task_id, typ, time = log.split(":")            task_id, time = int(task_id), int(time)                    if typ == "start":                if stack: # update the running time                    res[stack[-1]] += time - prev_time                stack.append(task_id)                prev_time = time # start a new function            else: # typ == "end", + 1 is because inclusive idx                res[stack.pop()] += time - prev_time + 1                prev_time = time + 1 # end of last function, i.e., a new func                    return res                