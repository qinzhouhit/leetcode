'''keys: Solutions:Similar:T:S:'''from typing import Listimport numpy as npclass Solution:    # shorten into array dp    # S: O(n)    def maximalSquare1(self, matrix: List[List[str]]) -> int:        # the 'prev' stores the dp[j - 1] of the previous row        r = len(matrix); c = len(matrix[0]) if r > 0 else 0        dp = [0]*(c + 1)        max_len = 0; prev = 0        for i in range(1,r+1):            for j in range(1,c+1):                temp = dp[j]                if matrix[i-1][j-1] == "1":                    dp[j] = min(dp[j-1], dp[j], prev)+1                    max_len = max(max_len, dp[j])                else:                    dp[j] = 0                prev = temp        return max_len ** 2                 # T: O(m*n), S: O(m*n) for dp    def maximalSquare(self, matrix: List[List[str]]) -> int:        max_len = 0        r = len(matrix); c = en(matrix[0]) if r > 0 else 0        dp = [[0]*(c+1) for _ in range(r+1)]        for i in range(1,r+1):            for j in range(1,c+1):                if matrix[i-1][j-1] == "1":                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])+1                    max_len = max(max_len, dp[i][j])                # else:                #    dp[i][j] = 0        return max_len ** 2    sol = Solution()print (sol.maximalSquare([["1","0","1","0","0"],\                          ["1","0","1","1","1"],\                          ["1","1","1","1","1"],\                          ["1","0","0","1","0"]]))