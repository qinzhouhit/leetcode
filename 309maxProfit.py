'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    '''    https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75927/Share-my-thinking-process    buy[i]: The maximum profit can be made if the first i days end with buy     or wait. E.g "buy, sell, buy" or "buy, cooldown, cooldown"    sell[i]: The maximum profit can be made if the first i days end with sell    or wait. E.g "buy, sell, buy, sell" or "buy, sell, cooldown, cooldown"    price: prices[i - 1], which is the stock price of the i-th day    '''    # T: O(N), S: O(n)    def maxProfit1(self, prices: List[int]) -> int:        if not prices or len(prices) < 2:            return 0        n = len(prices)        # buy[i]: max profit if the first "i" days end with a "buy" day        buy = [0] * (n + 1) # buy[0] is padding        # sell[i]: max profit if the first "i" days end with a "sell" day        sell = [0] * (n + 1) # sell[0] is padding        buy[1] = -prices[0]                for i in range(2, n+1):            price = prices[i - 1]            buy[i] = max(buy[i - 1], sell[i - 2] - price)            sell[i] = max(sell[i - 1], buy[i - 1] + price)        return sell[n]                        # concise version; T: O(N), S: O(1)    def maxProfit(self, prices: List[int]) -> int:        sold, held, reset = float('-inf'), float('-inf'), 0        for price in prices:            # Alternative: the calculation is done in parallel.            # Therefore no need to keep temporary variables            #sold, held, reset = held + price, max(held, reset-price), max(reset, sold)            pre_sold = sold            sold = held + price            held = max(held, reset - price)            reset = max(reset, pre_sold)        return max(sold, reset)