'''keys: trieSolutions:Similar: T:S:'''from typing import Listfrom collections import defaultdict# O(M) class TrieNode:    def __init__(self):        self.children = {}        self.isEnd = Falseclass WordDictionary1:    def __init__(self):        self.root = TrieNode()            # O(M) for S and T, M as len(word)    def addWord(self, word):        node = self.root        for w in word:            if w in node.children:                node = node.children[w]            else:                node.children[w] = TrieNode()                node = node.children[w]        node.isEnd = True                    # T: O(M); S: O(1) for "well-defined" words without dots    # T: O(M*N); S: O(M) for "well-defined" words with dots     def search(self, word):        stack = [(self.root, word)]        while stack:            node, w = stack.pop()            if not w:                if node.isEnd:                    return True            elif w[0]=='.':                for n in node.children.values():                    stack.append((n, w[1:]))            else:                if w[0] in node.children:                    n = node.children[w[0]]                    stack.append((n, w[1:]))        return False                    class WordDictionary:    '''using hashmap is not good for applications: finding all keys with    a common prefix; enumerating strings in lexicographical order; scaling    for large datasets due to hash collision, search T -> O(M*N^2)    '''    def __init__(self):        """        Initialize your data structure here.        """        self.d = defaultdict(set)            def addWord(self, word: str) -> None:        """        Adds a word into the data structure.        """        self.d[len(word)].add(word)            # # T: O(M*N), M as the length of the word to find;     # N as the number of words    def search(self, word: str) -> bool:        """        Returns if the word is in the data structure. A word could contain the        dot character '.' to represent any one letter.        """        m = len(word)        for dict_word in self.d[m]:            i = 0            while i < m and (dict_word[i] == word[i] or word[i] == "."):                i += 1            if i == m:                return True        return False        # Your WordDictionary object will be instantiated and called as such:# obj = WordDictionary()# obj.addWord(word)# param_2 = obj.search(word)