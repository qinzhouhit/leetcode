'''keys: trieSolutions:Similar: T:S:'''from typing import Listfrom collections import defaultdict# O(M) class WordNode:    def __init__(self):        self.children = {}        self.isEnd = Falseclass WordDictionary1:    def __init__(self):        self.root = WordNode()            def addWord(self, word):        node = self.root        for w in word:            if w in node.children:                node = node.children[w]            else:                node.children[w] = WordNode()                node = node.children[w]        node.isEnd = True                    def search(self, word):        stack = [(self.root,word)]        while stack:            node, w = stack.pop()            if not w:                if node.isEnd:                    return True            elif w[0]=='.':                for n in node.children.values():                    stack.append((n,w[1:]))            else:                if w[0] in node.children:                    n = node.children[w[0]]                    stack.append((n,w[1:]))        return False                    class WordDictionary:    def __init__(self):        """        Initialize your data structure here.        """        self.d = defaultdict(set)            def addWord(self, word: str) -> None:        """        Adds a word into the data structure.        """        self.d[len(word)].add(word)            # # T: O(M*N), M as the length of the word to find;     # N as the number of words    def search(self, word: str) -> bool:        """        Returns if the word is in the data structure. A word could contain the        dot character '.' to represent any one letter.        """        m = len(word)        for dict_word in self.d[m]:            i = 0            while i < m and (dict_word[i] == word[i] or word[i] == "."):                i += 1            if i == m:                return True        return False        # Your WordDictionary object will be instantiated and called as such:# obj = WordDictionary()# obj.addWord(word)# param_2 = obj.search(word)