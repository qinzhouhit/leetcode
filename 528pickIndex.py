'''keys: prefix sum to generate random number with weightsSolutions:Similar:T:S:'''from typing import Listimport random# prefix sum and binary searchclass Solution1:    # initialize the sum    # O(n) for T and S    def __init__(self, w: List[int]):        temp = 0        self.prefix_sum = []        for weight in w:            temp += weight            self.prefix_sum.append(temp)        self.total_sum = temp            # O(logn) for T and O(1) for S    def pickIndex(self) -> int:        # target = self.total_sum * random.random()        target = .3        # the binary search        low, high = 0, len(self.prefix_sum)        while low < high:            mid = low + (high - low) // 2 # avoid overflow            if target > self.prefix_sum[mid]:                low = mid + 1            else:                high = mid # must be mid        return low # or high, does not matter                        # prefix sum and linear searchclass Solution:    # initialize the sum    # O(n) for T and S    def __init__(self, w: List[int]):        temp = 0        self.prefix_sum = []        for weight in w:            temp += weight            self.prefix_sum.append(temp)        self.total_sum = temp            # O(n) for T and O(1) for S    def pickIndex(self) -> int:        target = self.total_sum * random.random()        for i, prefix_sum in enumerate(self.prefix_sum):            if target < prefix_sum:                return i        # Your Solution object will be instantiated and called as such:obj = Solution1([1,8,9,3,6])param_1 = obj.pickIndex()