'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # O(N) for S and T    # https://leetcode.com/problems/fraction-to-recurring-decimal/discuss/51109/Accepted-cpp-solution-with-explainations    def fractionToDecimal(self, numerator: int, denominator: int) -> str:        if numerator == 0: return "0"                res = ""        if (numerator < 0) ^ (denominator < 0): res += "-"                        n = abs(numerator); d = abs(denominator)        # append integral part        res += str(n // d)        # no fraction part        if n % d == 0: return res                res += "."                hashmap = {} # k: index, v: remainder        # simulate division process        r = n % d        while r:            # meet a known remainder, reach the end of the repeating part            if r in hashmap and hashmap[r] > 0:                # 0.6 => 0.(6)                res = res[:hashmap[r]] + "(" + res[hashmap[r]:] + ")"                break            # first-seen remainder, remember6 the current position for it            hashmap[r] = len(res)                        r *= 10 # what we do in long division            # append the quotient digit            res += str(r // d)            r %= d                return res                                