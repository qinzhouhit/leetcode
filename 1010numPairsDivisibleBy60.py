'''keys: Solutions:Similar:T:S:'''from typing import Listclass Solution:    # O(n) as T and O(1) as S, n = len(time)    def numPairsDivisibleBy60(self, time: List[int]) -> int:        # store the frequencies of the remainder a % 60        remainder = {} # k: remainder, v: freq        ct = 0        for val in time:            if val % 60 == 0: # then the other number must satisfy x % 60 = 0                ct += remainder.get(0, 0) # check those with remainder as 0            else: # then we want the sum of x1 % 60 and x2 % 60 equal to 60                ct += remainder.get(60 - val % 60, 0)            remainder[val % 60] = remainder.get(val % 60, 0) + 1        return ct                    # or use defaultdict to avoid h.get    def numPairsDivisibleBy601(self, time: List[int]) -> int:        reminders = collections.defaultdict(int)        ret = 0        for t in time:            if t % 60 == 0: # check if a%60==0 && b%60==0                ret += reminders[0]            else: # check if a%60+b%60==60                ret += reminders[60-t%60]            reminders[t % 60] += 1 # reminder to update the reminders        return ret