'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # next array    # T: O(N), N = len(T)    # S: O(W), W is the number of allowed values for T[i]    '''    Everytime a higher temperature is found, we update answer of the peak     one in the stack. If the day with higher temperature is not found, we     leave the ans to be the default 0.    '''    def dailyTemperatures1(self, T: List[int]) -> List[int]:        ans = [0] * len(T)        stack = [] # for the idx of temperatures        for i, t in enumerate(T):            while stack and t > T[stack[-1]]: # a warmer day coming in                prev = stack.pop() #                 ans[prev] = i - prev            stack.append(i) # t <= T[stack[-1]], the new day will always be stacked            return ans            # offical O(NW), N as len(T) and W as number of allowed values for T[i]    def dailyTemperatures(self, T):        nxt = [float('inf')] * 102        ans = [0] * len(T)        for i in range(len(T) - 1, -1, -1):            #Use 102 so min(nxt[t]) has a default value            warmer_index = min(nxt[t] for t in range(T[i]+1, 102))            if warmer_index < float('inf'):                ans[i] = warmer_index - i            nxt[T[i]] = i        return ans                # my naive, TLE    def dailyTemperatures(self, T: List[int]) -> List[int]:        res = []        for i in range(len(T)):            for j in range(i+1, len(T)):                ct = 0                if T[i] < T[j]:                    res.append(j - i)                    ct += 1                    break            if ct == 0 or i + 1 == len(T): # last day or no warmer day                res.append(0)        return res        