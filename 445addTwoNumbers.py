'''keys: Solutions:Similar: T:S:'''from typing import List# Definition for singly-linked list.class ListNode:    def __init__(self, val=0, next=None):        self.val = val        self.next = next        class Solution:    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:        stack1 = []; stack2 = []                while l1:            stack1.append(l1.val)            l1 = l1.next                while l2:            stack2.append(l2.val)            l2 = l2.next                sum_ = 0        temp = ListNode(0)        while stack1 or stack2:            if stack1:                sum_ += stack1.pop()            if stack2:                sum_ += stack2.pop()            temp.val = sum_ % 10 # cur node: remainder            head = ListNode(sum_ // 10) # head: carry node            head.next = temp # head -> temp            temp = head # move ptr to head            sum_ //= 10 # update the sum_                return temp if temp.val else temp.next            # cheating    def addTwoNumbers1(self, l1, l2):        x1, x2 = 0, 0        while l1:            x1 = x1*10+l1.val            l1 = l1.next        while l2:            x2 = x2*10+l2.val            l2 = l2.next        x = x1 + x2                head = ListNode(0)        if x == 0: return head        while x:            v, x = x%10, x//10            head.next, head.next.next = ListNode(v), head.next            #  # assign the current computed number to temp            # temp = head.next            # # add new significant digit after head            # head.next = ListNode(v)             # # reattach rest of the computed number to new sig digit            # head.next.next = temp                    return head.next