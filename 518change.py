'''keys: Solutions:Similar:416T:S:'''from typing import Listclass Solution:    # 1D dp, T: O(N*amount), N = len(coins)    # S: O(amount)    def change1(self, amount: int, coins: List[int]) -> int:        dp = [0] * (amount + 1)        dp[0] = 1                for coin in coins:            for i in range(coin, amount + 1):                dp[i] = dp[i] + dp[i - coin]        return dp[amount]            '''    dp[i][j] : the number of combinations to make up amount j by using the     first i types of coins    dp[i - 1][j]: means the number of combinations if we compeletly don't use    the i-th coin    dp[i][j - coins[i - 1]]: we must use at least one of the i-th coin, so we     expell the ith coin from j (Exclusive, opposite to the upper condition)    '''    def change(self, amount: int, coins: List[int]) -> int:        dp = [[0] * (amount + 1) for _ in range(len(coins)+1)]                dp[0][0] = 1                for i in range(1, len(coins)+1):            dp[i][0] = 1            for j in range(1, amount + 1):                if j >= coins[i-1]:                    dp[i][j] = dp[i-1][j] + dp[i][j - coins[i-1]]                else:                    dp[i][j] = dp[i-1][j]        # print (dp)        return dp[len(coins)][amount]        