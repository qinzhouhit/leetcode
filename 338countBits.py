'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # DP + Last set bit    # Setting that bit to zero with the bit trick, x &= x - 1    # O(n) for S and T    def countBits3(self, num: int) -> List[int]:        res = [0] * (num + 1)        for i in range(num+1):            res[i] = res[i & (i-1)] + 1        return res                # DP + Least significant bit    # O(n) for S and T    def countBits2(self, num: int) -> List[int]:        res = [0] * (num + 1)        for i in range(num+1):            res[i] = res[i >> 1] + i % 2        return res                    # pop count; T: O(nk), k is the number of bits in x    # S: O(n)    def countBits1(self, num: int) -> List[int]:        res = [0] * (num + 1)        for i in range(num + 1):            res[i] = self.helper(i)        return res        def helper(self, x):        ct = 0        while x != 0:            ct += 1            x &= x - 1        return ct                # T: O(num*M), M as the length of binary representation of num    def countBits(self, num: int) -> List[int]:        res = []        for i in range(num+1):            res.append(bin(i).count("1"))        return res