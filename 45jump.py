'''keys: backtracking, DP, greedySolutions:Similar:T:S:'''from typing import Listclass Solution:    # >>> official    def jump(self, nums: List[int]) -> int:        n = len(nums)        if n < 2:            return 0                 # max position one could reach         # starting from index <= i         max_pos = nums[0]        # max number of steps one could do        # inside this jump        max_steps = nums[0]                jumps = 1        for i in range(1, n):            # if to reach this point             # one needs one more jump            if max_steps < i: # only when the prev-max_steps jump cant reach it                jumps += 1                max_steps = max_pos            max_pos = max(max_pos, nums[i] + i)                        return jumps    # TODO: another way of greedy    def jump2(self, nums: List[int]) -> int:        jumpTimes = 0 # total number of jumps needed        last_end_index = 0 # the furthest index can be reached for last jump        furthest_pos = 0 # the furthest position can be reached during the jump                for i in range(len(nums)-1): # we don't have to consider the last index            # which is the end and guaranteed to be reached            if i + nums[i] > furthest_pos: # i+nums[i] is the furthest idx this jump can reach                furthest_pos = i + nums[i] # update the furthest pos            if i == last_end_index: # reaching the end of last jump,                 # then you must jump now! You jump as the step giving you                # the furthest pos!                jumpTimes += 1                last_end_index = furthest_pos        return jumpTimes            # >>>     # https://leetcode.com/problems/jump-game-ii/discuss/18019/10-lines-C%2B%2B-(16ms)-Python-BFS-Solutions-with-Explanations    def jump(self, nums: List[int]) -> int:        n, start, end, steps = len(nums), 0, 0, 0        while end < n - 1: # not need to consider last idx (n-1)            steps += 1            maxend = end + 1            for i in range(start, end + 1):                if i + nums[i] >= n - 1:                    return steps                maxend = max(maxend, i + nums[i])            start, end = end + 1, maxend        return steps        # TODO: this one for jump I    def jump0(self, nums: List[int]) -> int:        n = len(nums)                # max position one could reach         # starting from index <= i        max_pos = nums[0]                for i in range(1, n):                        # if one could't reach this point            if max_pos < i:                return False            max_pos = max(max_pos, nums[i] + i)                return True    sol = Solution()print (sol.jump2([2,3,1,1,4]))