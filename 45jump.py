'''keys: backtracking, DP, greedySolutions:Similar:T:S:'''from typing import Listclass Solution:    # TODO: another way of greedy    def jump2(self, nums: List[int]) -> int:        jumpTimes = 0 # total number of jumps needed        last_end_index = 0 # the furthest index can be reached for last jump        furthest_pos = 0 # the furthest position can be reached during the jump                for i in range(len(nums)-1): # we don't have to loop the last index            # which is the end and guaranteed to be reached            if i + nums[i] > furthest_pos:                furthest_pos = i + nums[i] # update the furthest pos            if i == last_end_index: # reaching the end of last jump,                 # then you must jump now! You jump as the step giving you                # the furthest pos!                jumpTimes += 1                last_end_index = furthest_pos        return jumpTimes                # TODO: this one for jump I    def jump0(self, nums: List[int]) -> int:        n = len(nums)                # max position one could reach         # starting from index <= i        max_pos = nums[0]                for i in range(1, n):                        # if one could't reach this point            if max_pos < i:                return False            max_pos = max(max_pos, nums[i] + i)                return True    sol = Solution()print (sol.jump2([2,3,1,1,4]))