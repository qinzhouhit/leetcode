'''keys: Solutions:Similar: T:S:'''from typing import Listclass Solution:    # O(14) for S and T    # find the loop pattern    # So once we enter the loop, every 14 steps must be the same state.    # cheat answer    def prisonAfterNDays1(self, cells, N):        for i in range((N - 1) % 14 + 1):            cells = [0] + [cells[i - 1] ^ cells[i + 1] ^ 1 for i in range(1, 7)] + [0]        return cells        # hashmap, We record all seen states.    # O(2^6) for S and Tï¼› LTE    def prisonAfterNDays(self, cells: List[int], N: int) -> List[int]:        seen = {str(cells): N}        while N:            seen.get(str(cells), N)            N -= 1            cells = [0] + [cells[i-1] ^ cells[i+1] ^ 1 for i in range(1,7)] + [0]            if str(cells) in seen:                '''Then when you see the same state again, you know that you                 have passed (lastSeen - currVal) state in between. So now you                 know your states repeat every (lastSeen - currVal) times.'''                N %= seen[str(cells)] - N        return cells