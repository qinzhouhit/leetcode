'''keys: Solutions:Similar: T:S:'''from typing import List###### https://leetcode.com/problems/design-hashmap/discuss/185347/Hash-with-Chaining-Pythonclass ListNode:    def __init__(self, key, val):        self.pair = (key, val)        self.next = Noneclass MyHashMap:    def __init__(self):        """        Initialize your data structure here.        """        self.m = 997 # prime number        self.h = [None]*self.m            def put(self, key, value):        """        value will always be non-negative.        :type key: int        :type value: int        :rtype: void        """        index = key % self.m        if self.h[index] == None:            self.h[index] = ListNode(key, value)        else:            cur = self.h[index]            while True:                if cur.pair[0] == key:                    cur.pair = (key, value) #update                    return                if cur.next == None: # these two ifs are parallel, you                     break                cur = cur.next            cur.next = ListNode(key, value)    def get(self, key):        """        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key        :type key: int        :rtype: int        """        index = key % self.m        cur = self.h[index]        while cur:            if cur.pair[0] == key:                return cur.pair[1]            else:                cur = cur.next        return -1    def remove(self, key):        """        Removes the mapping of the specified value key if this map contains a mapping for the key        :type key: int        :rtype: void        """        index = key % self.m        cur = prev = self.h[index]        if not cur:             return        if cur.pair[0] == key:            self.h[index] = cur.next        else:            cur = cur.next            while cur:                if cur.pair[0] == key:                    prev.next = cur.next                    break                else:                    cur, prev = cur.next, prev.next###### T: O(N/K), N as the number of all possible keys, K: number of prefined# buckets in hashmap, e.g., 2069# S: O(K+M), M the number of unique keys that have been inserted into the hashmap. class Bucket:    # essentially, it is a list of key-value tuples    def __init__(self):        self.bucket = []        def get(self, key):        for k, v in self.bucket:            if k == key:                return v        return -1        def update(self, key, value):        found = False        for i, kv in enumerate(self.bucket):            if key == kv[0]:                self.bucket[i] = (key, value)                found = True                break                if not found:            self.bucket.append((key, value))                def remove(self, key):        for i, kv in enumerate(self.bucket):            if key == kv[0]:                del self.bucket[i]class MyHashMap:    # hash_table is a list of bucket, corresponding to a modulus key    def __init__(self):        """        Initialize your data structure here.        """        # better to be a prime number, less collision        self.key_space = 2069        self.hash_table = [Bucket() for i in range(self.key_space)]            def put(self, key: int, value: int) -> None:        """        value will always be non-negative.        """        hash_key = key % self.key_space        self.hash_table[hash_key].update(key, value)            def get(self, key: int) -> int:        """        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key        """        hash_key = key % self.key_space        return self.hash_table[hash_key].get(key)                    def remove(self, key: int) -> None:        """        Removes the mapping of the specified value key if this map contains a mapping for the key        """        hash_key = key % self.key_space        self.hash_table[hash_key].remove(key)        