'''keys: sliding window approach in a linear timeSolutions:Similar: T:S:'''from typing import Listfrom collections import Counterclass Solution:    # the educative.io version    def findAnagrams2(self, s: str, p: str) -> List[int]:        result_indexes = []        p_ct = Counter(p)        l = 0        matched = 0        for r, c in enumerate(s):            if c in p_ct:                p_ct[c] -= 1                if p_ct[c] == 0:                    matched += 1            if matched == len(p_ct):                result_indexes.append(l)                if r-l+1 >= len(p):                l_c = s[l]                l += 1                if l_c in p_ct:                    if p_ct[l_c] == 0:                        matched -= 1                    p_ct[l_c] += 1        return result_indexes                # Recompute sliding window counter sCount at each step by adding     # one letter on the right and removing one letter on the left.    # T: O(Ns+Np)    # S: O(1)    def findAnagrams(self, s: str, p: str) -> List[int]:        ns, np = len(s), len(p)        if ns < np:            return []        p_count = Counter(p)        s_count = Counter() # for string in the window                output = []        # sliding window on the string s        for i in range(ns):            # add one more letter             # on the right side of the window            s_count[s[i]] += 1            # remove one letter             # from the left side of the window            if i >= np:                if s_count[s[i - np]] == 1:                    del s_count[s[i - np]]                else:                    s_count[s[i - np]] -= 1            # compare array in the sliding window            # with the reference array            if p_count == s_count:                output.append(i - np + 1)                return output                    # array??? ignore this, better use the Counter version    def findAnagrams1(self, s: str, p: str) -> List[int]:        ns, np = len(s), len(p)        if ns < np:            return []        p_count, s_count = [0] * 26, [0] * 26        # build reference array using string p        for ch in p:            p_count[ord(ch) - ord('a')] += 1                output = []        # sliding window on the string s        for i in range(ns):            # add one more letter             # on the right side of the window            s_count[ord(s[i]) - ord('a')] += 1            # remove one letter             # from the left side of the window            if i >= np:                s_count[ord(s[i - np]) - ord('a')] -= 1            # compare array in the sliding window            # with the reference array            if p_count == s_count:                output.append(i - np + 1)                return output                