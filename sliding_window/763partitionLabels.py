'''keys: https://leetcode.com/problems/partition-labels/discuss/298474/Python-two-pointer-solution-with-explanationSolutions:Similar: T:S:'''from typing import Listclass Solution:    # O(N) for T and O(1) for S    '''    Figure out the rightmost index of each char first and \    use it to denote the start of the next section.    Reset the left pointer at the start of each new section.    Store the difference of right and left pointers + 1 as in \    the result for each section.    '''    def partitionLabels(self, S: str) -> List[int]:        rightmost_idx = {c: i for i, c in enumerate(S)}        left, right = 0, 0 # l and r idx for each partition        result = []        for i, char in enumerate(S):            # right actually keeps growing, since the middle char may make             # the partition bigger than the initial char due to unseen            # char in the future, suggested by rightmost_idx            right = max(right, rightmost_idx[char])             if i == right: # comes to the end of current partition                result += [right-left + 1]                left = i + 1        return result