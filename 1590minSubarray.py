'''keys: Solutions:Similar:T:S:'''from typing import List# https://leetcode.com/problems/make-sum-divisible-by-p/discuss/854166/JavaPython-3-O(n)-code-w-brief-explanation-analysis-and-similar-problems.# https://leetcode.com/problems/make-sum-divisible-by-p/discuss/854197/JavaC%2B%2BPython-Prefix-Sumclass Solution:    '''    Calculate the need = sum(A) % p. Get rid of subarray with sum == need    Then the question become:    Find the shortest array with sum % p = need.    '''    def minSubarray(self, nums: List[int], p: int) -> int:        # need means we need to get rid of subarray whose sum == need        need = sum(nums) % p        # k: remainder, v: idx, (the last idx that         # (A[0] + A[1] + .. + A[i]) % p = remainder        dp = {0: -1}        cur = 0 # current need of subarray        res = n = len(nums)        for idx, val in enumerate(nums):            cur = (cur + val) % p            dp[cur] = idx            if (cur - need) % p in dp:                res = min(res, idx - dp[(cur - need) % p])        return res if res < n else -1            #     def minSubarray1(self, nums: List[int], p: int) -> int:        need = sum(nums) % p        res = n = len(nums)        h = {0: -1}        cur = 0                for idx, val in enumerate(nums):            cur = (cur + val) % p            h[cur] = idx            prev = (cur - need) % p            if prev in h:                new_res = idx - h[prev]                res = min(res, new_res)        return res if res < n else -1