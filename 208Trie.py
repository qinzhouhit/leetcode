'''keys: Solutions:Similar: T:S:'''from typing import Listimport collectionsclass TrieNode:    # Initialize your data structure here.    def __init__(self):        # dynamic dictionary (recursively)        self.children = collections.defaultdict(TrieNode)        self.is_word = Falseclass Trie1:        def __init__(self):        self.root = TrieNode()        def insert(self, word):        current = self.root        for letter in word:            current = current.children[letter]        current.is_word = True        def search(self, word):        current = self.root        for letter in word:            current = current.children.get(letter)            if current is None:                return False        return current.is_word        def startsWith(self, prefix):        current = self.root        for letter in prefix:            current = current.children.get(letter)            if current is None:                return False        return True# just use dictionaryclass Trie:    def __init__(self):        """        Initialize your data structure here.        """        self.root = {}            # T and S: O(m), m as key length    def insert(self, word: str) -> None:        """        Inserts a word into the trie.        """        p = self.root        for c in word:            if c not in p:                p[c] = {}            p = p[c]        p['#'] = True            # T: O(m), S: O(1)    def search(self, word: str) -> bool:        """        Returns if the word is in the trie.        """        node = self.find(word)        return '#' in node            # T: O(m), S: O(1)    def startsWith(self, prefix: str) -> bool:        """        Returns if there is any word in the trie that starts with the given prefix.        """        return self.find(prefix)        def find(self, prefix):        p = self.root        for c in prefix:            if c not in p:                 return None            p = p[c]        return p                                            