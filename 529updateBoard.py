'''keys: Solutions:Similar:T:S:'''from typing import Listclass Solution:    # T: O(M*N)    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:        if not board:            return []                rows, cols = len(board), len(board[0])        x, y = click[0], click[1]                if board[x][y] == "M":            board[x][y] = "X"            return board                def dfs(board, x, y):            if board[x][y] != "E":                return                        directions = [(-1,-1), (0,-1), (1,-1), (1,0), (1,1), \                          (0,1), (-1,1), (-1,0)]                        mine_ct = 0 # search for mine            for d in directions:                nx, ny = x + d[0], y + d[1]                if 0 <= nx < rows and 0 <= ny < cols and board[nx][ny] == "M":                    mine_ct += 1                        if mine_ct == 0:                board[x][y] = "B"            else:                board[x][y] = str(mine_ct)                return # important! stop further search                        for d in directions:                nx, ny = x + d[0], y + d[1]                if 0 <= nx < rows and 0 <= ny < cols:                    dfs(board, nx, ny)                        dfs(board, x, y)        return board                                        